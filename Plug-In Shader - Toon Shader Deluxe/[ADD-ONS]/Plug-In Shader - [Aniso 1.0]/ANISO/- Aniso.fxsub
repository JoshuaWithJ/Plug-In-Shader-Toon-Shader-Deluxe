////////////////////////////////////////////////////////////////////////////////////////////////
//
//  basic.fx ver2.0
//  作成: 舞力介入P
//
////////////////////////////////////////////////////////////////////////////////////////////////
// パラメータ宣言

// 座法変換行列
float4x4 WorldViewProjMatrix      : WORLDVIEWPROJECTION;
float4x4 WorldMatrix              : WORLD;
float4x4 LightWorldViewProjMatrix : WORLDVIEWPROJECTION < string Object = "Light"; >;

float3   LightDirection    : DIRECTION < string Object = "Light"; >;
float3   CameraPosition    : POSITION  < string Object = "Camera"; >;

// マテリアル色
float4   MaterialDiffuse   : DIFFUSE  < string Object = "Geometry"; >;
float3   MaterialAmbient   : AMBIENT  < string Object = "Geometry"; >;
float3   MaterialEmmisive  : EMISSIVE < string Object = "Geometry"; >;
float3   MaterialSpecular  : SPECULAR < string Object = "Geometry"; >;
float    SpecularPower     : SPECULARPOWER < string Object = "Geometry"; >;
float3   MaterialToon      : TOONCOLOR;
// ライト色
float3   LightDiffuse      : DIFFUSE   < string Object = "Light"; >;
float3   LightAmbient      : AMBIENT   < string Object = "Light"; >;
float3   LightSpecular     : SPECULAR  < string Object = "Light"; >;
static float4 DiffuseColor  = MaterialDiffuse  * float4(LightDiffuse, 1.0f);
static float3 AmbientColor  = MaterialAmbient  * LightAmbient + MaterialEmmisive;
static float3 SpecularColor = MaterialSpecular * LightSpecular;

bool use_texture;  //テクスチャの有無
bool use_toon;     //トゥーンの有無

bool     parthf;   // パースペクティブフラグ
bool     transp;   // 半透明フラグ
#define SKII1    1500
#define SKII2    8000
#define Toon     3

// オブジェクトのテクスチャ
texture ObjectTexture: MATERIALTEXTURE;
sampler ObjTexSampler = sampler_state
{
    texture = <ObjectTexture>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    MIPFILTER = LINEAR;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
};

#if Use_Normal_Map == 1 
texture Normal_T <string ResourceName = Normal_Map;>;
#else
texture Normal_T;
#endif
sampler Normal_S = sampler_state {
    texture = <Normal_T>;
    MINFILTER = ANISOTROPIC;
    MAGFILTER = ANISOTROPIC;
    MIPFILTER = ANISOTROPIC;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
	ADDRESSW  = WRAP;
	MAXANISOTROPY = 16;
};

float4x4 CTF(float3 frg_position, float3 frg_normal, float2 frg_texcoord) {
	float4x4 Out;
	frg_position = frg_position * float3(1, 1, 1);
	float3 p_dx = ddx(frg_position.xyz);
	float3 p_dy = ddy(frg_position.xyz);
	float2 tc_dx = ddx(frg_texcoord.xy);
	float2 tc_dy = ddy(frg_texcoord.xy);
	float direction = tc_dx.x * tc_dy.y - tc_dx.y * tc_dy.x > 0.0f ? 1.0f : -1.0f;
	float3 t = normalize(tc_dy.y * p_dx - tc_dx.y * p_dy);
	float3 b = normalize( (tc_dy.x * p_dx - tc_dx.x * p_dy) * direction );
	float3 n = normalize(frg_normal);
	float3 x = cross(n, t);
	t = cross(x, n);
	t = normalize(t);
	x = cross(b, n);
	b = cross(n, x);
	b = normalize(b);
	
	Out[0].xyz = t;
	Out[1].xyz = b;
	Out[2].xyz = frg_normal;
	return Out;
}

///////////////////////////////////////////////////////////////////////////////////////////////
// オブジェクト描画（セルフシャドウOFF）

// トゥーンマップのサンプラ。"register(s0)"なのはMMDがs0を使っているから
sampler ToonTexSampler : register(s0);

struct VS_OUTPUT
{
    float4 Pos        : POSITION;    // 射影変換座標
    float2 Tex        : TEXCOORD1;   // テクスチャ
    float3 Normal     : TEXCOORD2;   // 法線
    float3 Eye        : TEXCOORD3;   // カメラとの相対位置
	float3 Vertcoord  : TEXCOORD4;   // ###########
    float4 Color      : COLOR0;      // ディフューズ色
    float3 Specular   : COLOR1;      // スペキュラ色
};

// 頂点シェーダ
VS_OUTPUT Basic_VS(float4 Pos : POSITION, float3 Normal : NORMAL, float2 Tex : TEXCOORD0)
{
    VS_OUTPUT Out = (VS_OUTPUT)0;
    
    // カメラ視点のワールドビュー射影変換
    Out.Pos = mul( Pos, WorldViewProjMatrix );
	Out.Vertcoord = mul( Pos, WorldMatrix );
    
    // カメラとの相対位置
    Out.Eye = CameraPosition - mul( Pos, WorldMatrix );
    // 頂点法線
    Out.Normal = normalize( mul( Normal, (float3x3)WorldMatrix ) );
    
    // ディフューズ色＋アンビエント色 計算
    Out.Color.rgb = saturate( max(0,dot( Out.Normal, -LightDirection )) * DiffuseColor.rgb + AmbientColor );
    Out.Color.a = DiffuseColor.a;
    
    // テクスチャ座標
    Out.Tex = Tex;
    
    // スペキュラ色計算
    float3 HalfVector = normalize( normalize(Out.Eye) + -LightDirection );
    Out.Specular = pow( max(0,dot( HalfVector, Out.Normal )), SpecularPower ) * SpecularColor;
    
    return Out;
}

// ピクセルシェーダ
float4 Basic_PS( VS_OUTPUT IN ) : COLOR0
{
    float4 Color = IN.Color;
    if ( use_texture ) {  //※このif文は非効率的
        // テクスチャ適用
        Color *= tex2D( ObjTexSampler, IN.Tex );
    }
	
	float4x4 Frame = CTF(IN.Vertcoord, IN.Normal, IN.Tex);
	float2 frg_texcoord = IN.Tex;
	float3 frg_normal = Frame[2].xyz;
	float3 frg_eye = normalize(IN.Eye);
	float3 frg_tangent = Frame[0].xyz;
	float3 frg_binormal = Frame[1].xyz;
	float3 frg_aniso_tangent;
	
	#if Aniso_Direction == 0
		#define ANISO_1 1
	#else
		#define ANISO_1 0
	#endif

	#if Aniso_Direction == 1
		#define ANISO_2 1
	#else
		#define ANISO_2 0
	#endif

	#if Aniso_Direction == 2
		#define ANISO_3 1
	#else
		#define ANISO_3 0
	#endif
	
		if (ANISO_3) { // #if ANISO_3_DEF
            float3 t_normal_w;
			float3 tangent_w = frg_tangent;
			float3 binormal_w = frg_binormal;
            float2 aniso_tmp;
            aniso_tmp.x = frg_binormal.x;
            aniso_tmp.y = frg_tangent.y;
            t_normal_w.x = frg_tangent.z;
            t_normal_w.y = frg_binormal.z;
            tangent_w.y = aniso_tmp.x;
            tangent_w.z = frg_normal.x;
            binormal_w.x = aniso_tmp.y;
            binormal_w.z = frg_normal.y;
            t_normal_w.z = frg_normal.z;

            float3 aniso_tangent;
            aniso_tangent.xy = frg_texcoord.xy * 2.0 - 1.0;
            aniso_tangent.z = 0.01;
            frg_aniso_tangent.x = dot(tangent_w, aniso_tangent);
            frg_aniso_tangent.y = dot(binormal_w, aniso_tangent);
            frg_aniso_tangent.z = dot(t_normal_w, aniso_tangent);
        }
        else if (ANISO_2) { // #elif ANISO_2_DEF
            frg_aniso_tangent = frg_binormal;
        }
        else if (ANISO_1) { // #elif ANISO_1_DEF
            frg_aniso_tangent = frg_tangent;
        } // #endif
	
	float4 tmp;
	float3 normal;
	#if Use_Normal_Map
	tmp.xy = tex2D(Normal_S, frg_texcoord.xy).xy * 2.0 - 1.0;
    tmp.zw = tmp.xy * tmp.xy * tmp.xy;
    tmp *= float4(NM_Intensity, Flip_Y ? -NM_Intensity : NM_Intensity, 2.0, 2.0);
    tmp.xy += tmp.w;

    normal = frg_normal.xyz;
    normal += frg_tangent * tmp.x;
    normal += frg_binormal * tmp.y;
    normal = normalize(normal);
	#else
	normal = IN.Normal;
	#endif
	
    float3 aniso_tangent = normalize(frg_aniso_tangent);
    aniso_tangent = normalize(aniso_tangent - dot(aniso_tangent, normal) * normal);
	
    tmp.x = dot(aniso_tangent, -LightDirection.xyz);
    tmp.y = dot(aniso_tangent, frg_eye);
    tmp.z = -tmp.x;
    tmp.xyzw = tmp.xyxz * tmp.xyyy + float4(-1.01, -1.01, 0.0, 0.0);

    tmp.xy = -tmp.xy * rsqrt(-tmp.xy);
    tmp.yz = clamp(tmp.xx * tmp.yy - tmp.zw, 0.0, 1.0);
	
    Color.rgb = tmp.xyz;
    return Color;
}

// オブジェクト描画用テクニック
technique MainTec < string MMDPass = "object"; > {
    pass DrawObject
    {
        VertexShader = compile vs_3_0 Basic_VS();
        PixelShader  = compile ps_3_0 Basic_PS();
    }
}

// オブジェクト描画用テクニック
technique MainTecBS  < string MMDPass = "object_ss"; > {
    pass DrawObject {
        VertexShader = compile vs_3_0 Basic_VS();
        PixelShader  = compile ps_3_0 Basic_PS();
    }
}


///////////////////////////////////////////////////////////////////////////////////////////////
